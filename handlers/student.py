from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from states import ProblemSolvingState, BookingState
from datetime import timedelta, datetime

from features.problem_solving import solve_problem
from services import execute_query
from states import FeedbackState
from .main import send_main_menu
from keyboards import generate_back_button, generate_feedback_keyboard, generate_tutor_keyboard, student_menu, \
    main_menu, generate_confirm_booking_keyboard
from utils import get_user_role

router = Router()


@router.callback_query(F.data == "student_functions")
async def student_functions(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await call.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
                                     reply_markup=main_menu)
        await call.answer()
        return

    await call.message.edit_text(
        "üéì –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:",
        reply_markup=student_menu
    )
    await call.answer()


@router.callback_query(F.data == "feedback")
async def feedback_start(call: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —É —Å—Ç—É–¥–µ–Ω—Ç–∞, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
    """
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await call.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=generate_back_button()
        )
        await call.answer()
        return

    await state.clear()

    completed_bookings = execute_query("""
        SELECT DISTINCT t.id, t.name
        FROM bookings b
        JOIN tutors t ON b.tutor_id = t.id
        WHERE b.student_contact = (
            SELECT student_contact
            FROM students
            WHERE id = ?
        ) AND b.status = 'approved'
    """, (call.from_user.id,), fetchall=True)

    if completed_bookings:
        response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ (–≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å –Ω–∏–º–∏):\n\n"
        for tutor_id, tutor_name in completed_bookings:
            response += f"{tutor_id}: {tutor_name}\n"

        await call.message.edit_text(response, reply_markup=generate_back_button())
        await state.set_state(FeedbackState.waiting_for_tutor_id)
    else:
        await call.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏.",
            reply_markup=generate_back_button()
        )
    await call.answer()


@router.message(FeedbackState.waiting_for_tutor_id)
async def handle_feedback_tutor(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞."""
    tutor_id = message.text.strip()
    tutor = execute_query("SELECT id, name FROM tutors WHERE id = ?", (tutor_id,), fetchone=True)

    if tutor:
        await state.update_data(tutor_id=tutor[0])
        await state.set_state(FeedbackState.waiting_for_rating)
        await message.reply("‚≠ê –£–∫–∞–∂–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (1-5):")
    else:
        await message.reply("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(FeedbackState.waiting_for_rating)
async def handle_feedback_rating(message: Message, state: FSMContext):
    """–£–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    try:
        rating = int(message.text)
        if 1 <= rating <= 5:
            await state.update_data(rating=rating)
            await state.set_state(FeedbackState.waiting_for_comment)
            await message.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        else:
            await message.reply("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5.")


@router.message(FeedbackState.waiting_for_comment)
async def save_feedback(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞."""
    comment = message.text.strip()
    data = await state.get_data()
    tutor_id = data["tutor_id"]
    rating = data["rating"]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    execute_query("""
    INSERT INTO feedback (tutor_id, student_name, student_contact, rating, comment)
    VALUES (?, ?, ?, ?, ?)
    """, (tutor_id, message.from_user.full_name, message.from_user.id, rating, comment))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    update_tutor_rating(tutor_id)

    await state.clear()
    await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await send_main_menu(message)


@router.callback_query(F.data == "view_feedback")
async def view_feedback(call: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ —É—á–µ–Ω–∏–∫–∞."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await call.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        await call.answer()
        return

    feedbacks = execute_query("""
        SELECT f.id, t.name, f.rating, f.comment
        FROM feedback f
        JOIN tutors t ON f.tutor_id = t.id
        WHERE f.student_contact = ?
    """, (call.from_user.id,), fetchall=True)

    if feedbacks:
        response = "üìù –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
        for feedback_id, tutor_name, rating, comment in feedbacks:
            response += f"#{feedback_id}: {tutor_name}\n‚≠ê {rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
            await call.message.answer(response, reply_markup=generate_feedback_keyboard(feedback_id))
    else:
        await call.message.edit_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data.startswith("edit_feedback_"))
async def edit_feedback(call: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    feedback_id = call.data.split("_")[2]
    feedback = execute_query("""
        SELECT id, tutor_id, comment
        FROM feedback
        WHERE id = ? AND student_contact = ?
    """, (feedback_id, call.from_user.id), fetchone=True)

    if feedback:
        await state.update_data(feedback_id=feedback[0], tutor_id=feedback[1])
        await state.set_state(FeedbackState.waiting_for_rating)
        await call.message.edit_text("‚≠ê –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (1-5):", reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.",
                                     reply_markup=generate_back_button())


@router.callback_query(F.data.startswith("delete_feedback_"))
async def delete_feedback(call: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    feedback_id = call.data.split("_")[2]
    feedback = execute_query("""
        SELECT id, tutor_id
        FROM feedback
        WHERE id = ? AND student_contact = ?
    """, (feedback_id, call.from_user.id), fetchone=True)

    if feedback:
        tutor_id = feedback[1]
        execute_query("DELETE FROM feedback WHERE id = ?", (feedback_id,))
        update_tutor_rating(tutor_id)
        await call.message.edit_text("‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.", reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ.",
                                     reply_markup=generate_back_button())


@router.callback_query(F.data.startswith("view_tutor_feedback_"))
async def view_tutor_feedback(call: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ."""
    tutor_id = call.data.split("_")[-1]
    feedbacks = execute_query("""
        SELECT student_name, rating, comment
        FROM feedback
        WHERE tutor_id = ?
    """, (tutor_id,), fetchall=True)

    if feedbacks:
        response = f"üìã –û—Ç–∑—ã–≤—ã –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ:\n\n"
        for student_name, rating, comment in feedbacks:
            response += f"üë§ {student_name}\n‚≠ê {rating}\nüí¨ {comment}\n\n"
    else:
        response = "‚ùå –£ —ç—Ç–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."

    await call.message.edit_text(response, reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "calendar")
async def calendar_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await call.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        await call.answer()
        return

    await state.clear()
    bookings = execute_query("""
    SELECT t.name, b.date, b.time, b.status
    FROM bookings b
    JOIN tutors t ON b.tutor_id = t.id
    WHERE b.student_contact = ?
    ORDER BY b.date, b.time
    """, (call.from_user.id,), fetchall=True)

    if bookings:
        response = "üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
        for tutor_name, date, time, status in bookings:
            response += f"üë©‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\nüìÜ –î–∞—Ç–∞: {date}, –≤—Ä–µ–º—è: {time}\nüìå –°—Ç–∞—Ç—É—Å: {status}\n\n"
    else:
        response = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π."

    await call.message.edit_text(response, reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "find_tutor")
async def find_tutor_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞'."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await call.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        await call.answer()
        return

    await state.clear()
    tutors = execute_query("SELECT id, name FROM tutors", fetchall=True)
    if tutors:
        await call.message.edit_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–∑—ã–≤—ã:",
            reply_markup=generate_tutor_keyboard(tutors)
        )
    else:
        await call.message.edit_text("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "solve_problem")
async def solve_problem_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await call.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        await call.answer()
        return

    await state.clear()
    await state.set_state(ProblemSolvingState.waiting_for_problem)
    await call.message.edit_text("ü§î –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å:", reply_markup=generate_back_button())
    await call.answer()


@router.message(ProblemSolvingState.waiting_for_problem)
async def solve_user_problem(message: Message, state: FSMContext):
    """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
    problem = message.text
    await message.reply("‚è≥ –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        solution = solve_problem(problem)
        await state.clear()
        await message.reply(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n{solution}")
    except Exception as e:
        await state.clear()
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
    await send_main_menu(message, state)


@router.callback_query(F.data == "book")
async def start_booking(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await call.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=generate_back_button()
        )
        return

    await state.clear()
    tutors = execute_query("SELECT id, name FROM tutors", fetchall=True)
    if tutors:
        tutor_list = "\n".join([f"{tutor_id}: {name}" for tutor_id, name in tutors])
        await call.message.edit_text(
            f"üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã:\n{tutor_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=generate_back_button()
        )
        await state.set_state(BookingState.waiting_for_tutor_id)
    else:
        await call.message.edit_text(
            "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=generate_back_button()
        )


@router.message(BookingState.waiting_for_tutor_id)
async def handle_tutor_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    tutor_id = message.text.strip()
    tutor = execute_query("SELECT id, name FROM tutors WHERE id = ?", (tutor_id,), fetchone=True)
    if tutor:
        await state.update_data(tutor_id=tutor[0])
        await message.reply(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:",
            reply_markup=generate_back_button()
        )
        await state.set_state(BookingState.waiting_for_date)
    else:
        await message.reply("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(BookingState.waiting_for_date)
async def handle_booking_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è."""
    date_text = message.text.strip()
    try:
        selected_date = datetime.strptime(date_text, "%Y-%m-%d").date()
        if selected_date >= datetime.now().date():
            await state.update_data(date=selected_date.strftime("%Y-%m-%d"))
            await message.reply("üìÖ –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")
            await state.set_state(BookingState.waiting_for_time)
        else:
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")


@router.message(BookingState.waiting_for_time)
async def handle_booking_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    time_text = message.text.strip()
    try:
        datetime.strptime(time_text, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏

        data = await state.get_data()
        date = data["date"]
        selected_datetime = datetime.strptime(f"{date} {time_text}", "%Y-%m-%d %H:%M")
        if selected_datetime <= datetime.now() + timedelta(hours=1.5):
            await message.reply("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1,5 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor_id = data["tutor_id"]
        existing_booking = execute_query("""
            SELECT id FROM bookings 
            WHERE tutor_id = ? AND date = ? AND time = ?
        """, (tutor_id, date, time_text), fetchone=True)

        if existing_booking:
            await message.reply("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
            return

        await state.update_data(time=time_text)
        await state.set_state(BookingState.waiting_for_comment)
        await message.reply("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'):")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@router.message(BookingState.waiting_for_comment)
async def handle_comment(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    comment = message.text.strip()
    if comment.lower() == "–Ω–µ—Ç":
        comment = ""

    await state.update_data(comment=comment)
    data = await state.get_data()

    tutor = execute_query("SELECT name FROM tutors WHERE id = ?", (data["tutor_id"],), fetchone=True)
    if tutor:
        tutor_name = tutor[0]
        await message.reply(
            f"üìÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=generate_confirm_booking_keyboard()
        )
        await state.set_state(BookingState.confirm_booking)
    else:
        await message.reply("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data == "confirm_booking")
async def confirm_booking(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    data = await state.get_data()
    tutor_id = data["tutor_id"]
    date = data["date"]
    time = data["time"]
    comment = data.get("comment", "")
    student_name = call.from_user.full_name

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    execute_query("""
        INSERT INTO bookings (tutor_id, student_name, student_contact, date, time, status, comment)
        VALUES (?, ?, ?, ?, ?, 'pending', ?)
    """, (tutor_id, student_name, call.from_user.id, date, time, comment))

    await state.clear()
    await call.message.edit_text("‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É!",
                                 reply_markup=generate_back_button())


@router.callback_query(F.data == "cancel_booking")
async def cancel_booking(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await state.clear()
    await call.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=generate_back_button())
    await call.answer()


def update_tutor_rating(tutor_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    tutor_exists = execute_query(
        "SELECT 1 FROM tutors WHERE id = ?", (tutor_id,), fetchone=True
    )
    if not tutor_exists:
        print(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å ID {tutor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        execute_query("""
        UPDATE tutors
        SET rating = COALESCE((SELECT AVG(rating) FROM feedback WHERE tutor_id = ?), 0),
            feedback_count = (SELECT COUNT(*) FROM feedback WHERE tutor_id = ?)
        WHERE id = ?
        """, (tutor_id, tutor_id, tutor_id))
        print(f"–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å ID {tutor_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å ID {tutor_id}: {e}")


def register_handlers_student(dp):
    dp.include_router(router)
