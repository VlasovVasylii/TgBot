from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from db import execute_query
from states import FeedbackState
from .menu import send_main_menu
from keyboards import generate_back_button, generate_feedback_keyboard

router = Router()


@router.callback_query(F.data == "feedback")
async def feedback_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
    await state.clear()
    tutors = execute_query("""
        SELECT DISTINCT t.id, t.name
        FROM tutors t
        JOIN bookings b ON b.tutor_id = t.id
        WHERE b.student_contact = ? AND b.status = 'completed'
    """, (call.from_user.id,), fetchall=True)

    if tutors:
        response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ (–≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å —Å –Ω–∏–º–∏):\n\n"
        for tutor_id, name in tutors:
            response += f"{tutor_id}: {name}\n"
        await call.message.edit_text(response, reply_markup=generate_back_button())
        await state.set_state(FeedbackState.waiting_for_tutor_id)
    else:
        await call.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏.",
                                     reply_markup=generate_back_button())
    await call.answer()


@router.message(FeedbackState.waiting_for_tutor_id)
async def handle_feedback_tutor(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞."""
    tutor_id = message.text.strip()
    tutor = execute_query("SELECT id, name FROM tutors WHERE id = ?", (tutor_id,), fetchone=True)

    if tutor:
        await state.update_data(tutor_id=tutor[0])
        await state.set_state(FeedbackState.waiting_for_rating)
        await message.reply("‚≠ê –£–∫–∞–∂–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (1-5):")
    else:
        await message.reply("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(FeedbackState.waiting_for_rating)
async def handle_feedback_rating(message: Message, state: FSMContext):
    """–£–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    try:
        rating = int(message.text)
        if 1 <= rating <= 5:
            await state.update_data(rating=rating)
            await state.set_state(FeedbackState.waiting_for_comment)
            await message.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        else:
            await message.reply("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5.")


@router.message(FeedbackState.waiting_for_comment)
async def save_feedback(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞."""
    comment = message.text.strip()
    data = await state.get_data()
    tutor_id = data["tutor_id"]
    rating = data["rating"]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    execute_query("""
    INSERT INTO feedback (tutor_id, student_name, student_contact, rating, comment)
    VALUES (?, ?, ?, ?, ?)
    """, (tutor_id, message.from_user.full_name, message.from_user.id, rating, comment))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    update_tutor_rating(tutor_id)

    await state.clear()
    await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await send_main_menu(message)


@router.callback_query(F.data == "view_feedback")
async def view_feedback(call: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ —É—á–µ–Ω–∏–∫–∞."""
    feedbacks = execute_query("""
        SELECT f.id, t.name, f.rating, f.comment
        FROM feedback f
        JOIN tutors t ON f.tutor_id = t.id
        WHERE f.student_contact = ?
    """, (call.from_user.id,), fetchall=True)

    if feedbacks:
        response = "üìù –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
        for feedback_id, tutor_name, rating, comment in feedbacks:
            response += f"#{feedback_id}: {tutor_name}\n‚≠ê {rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
            await call.message.answer(response, reply_markup=generate_feedback_keyboard(feedback_id))
    else:
        await call.message.edit_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data.startswith("edit_feedback_"))
async def edit_feedback(call: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    feedback_id = call.data.split("_")[2]
    feedback = execute_query("""
        SELECT id, tutor_id, comment
        FROM feedback
        WHERE id = ? AND student_contact = ?
    """, (feedback_id, call.from_user.id), fetchone=True)

    if feedback:
        await state.update_data(feedback_id=feedback[0], tutor_id=feedback[1])
        await state.set_state(FeedbackState.waiting_for_rating)
        await call.message.edit_text("‚≠ê –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (1-5):", reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.",
                                     reply_markup=generate_back_button())


@router.callback_query(F.data.startswith("delete_feedback_"))
async def delete_feedback(call: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    feedback_id = call.data.split("_")[2]
    feedback = execute_query("""
        SELECT id, tutor_id
        FROM feedback
        WHERE id = ? AND student_contact = ?
    """, (feedback_id, call.from_user.id), fetchone=True)

    if feedback:
        tutor_id = feedback[1]
        execute_query("DELETE FROM feedback WHERE id = ?", (feedback_id,))
        update_tutor_rating(tutor_id)
        await call.message.edit_text("‚úÖ –û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.", reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ.",
                                     reply_markup=generate_back_button())


@router.callback_query(F.data.startswith("view_tutor_feedback_"))
async def view_tutor_feedback(call: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ."""
    tutor_id = call.data.split("_")[-1]
    feedbacks = execute_query("""
        SELECT student_name, rating, comment
        FROM feedback
        WHERE tutor_id = ?
    """, (tutor_id,), fetchall=True)

    if feedbacks:
        response = f"üìã –û—Ç–∑—ã–≤—ã –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ:\n\n"
        for student_name, rating, comment in feedbacks:
            response += f"üë§ {student_name}\n‚≠ê {rating}\nüí¨ {comment}\n\n"
    else:
        response = "‚ùå –£ —ç—Ç–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤."

    await call.message.edit_text(response, reply_markup=generate_back_button())
    await call.answer()


def update_tutor_rating(tutor_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    execute_query("""
    UPDATE tutors
    SET rating = (SELECT AVG(rating) FROM feedback WHERE tutor_id = ?),
        feedback_count = (SELECT COUNT(*) FROM feedback WHERE tutor_id = ?)
    WHERE id = ?
    """, (tutor_id, tutor_id, tutor_id))


def register_handlers_student(dp):
    dp.include_router(router)
