from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from states import FeedbackState
from db import execute_query
from keyboards import generate_back_button, generate_feedback_keyboard, generate_tutor_keyboard, student_menu, main_menu
from utils import get_user_role
from handlers import send_or_edit_message
from .main import send_main_menu

router = Router()


@router.callback_query(F.data == "student_functions")
async def student_functions(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await send_or_edit_message(
            call,
            text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=main_menu,
            edit=False
        )
        return

    await send_or_edit_message(
        call,
        text="üéì –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:",
        reply_markup=student_menu,
        edit=True
    )


@router.callback_query(F.data == "feedback")
async def feedback_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await send_or_edit_message(
            call,
            text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=main_menu,
            edit=False
        )
        return

    tutors = execute_query("""
        SELECT DISTINCT t.id, t.name
        FROM tutors t
        JOIN bookings b ON b.tutor_id = t.id
        WHERE b.student_contact = ? AND b.status = 'completed'
    """, (call.from_user.id,), fetchall=True)

    if tutors:
        response = "üìù –í—ã–±–µ—Ä–∏—Ç–µ ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞:\n\n"
        for tutor_id, name in tutors:
            response += f"{tutor_id}: {name}\n"
        await send_or_edit_message(
            call,
            text=response,
            reply_markup=generate_back_button(),
            edit=True
        )
        await state.set_state(FeedbackState.waiting_for_tutor_id)
    else:
        await send_or_edit_message(
            call,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏.",
            reply_markup=generate_back_button(),
            edit=False
        )


@router.message(FeedbackState.waiting_for_tutor_id)
async def handle_feedback_tutor(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞."""
    tutor_id = message.text.strip()
    tutor = execute_query("SELECT id, name FROM tutors WHERE id = ?", (tutor_id,), fetchone=True)

    if tutor:
        await state.update_data(tutor_id=tutor[0])
        await state.set_state(FeedbackState.waiting_for_rating)
        await message.reply("‚≠ê –£–∫–∞–∂–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ (1-5):")
    else:
        await message.reply("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(FeedbackState.waiting_for_rating)
async def handle_feedback_rating(message: Message, state: FSMContext):
    """–£–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    try:
        rating = int(message.text)
        if 1 <= rating <= 5:
            await state.update_data(rating=rating)
            await state.set_state(FeedbackState.waiting_for_comment)
            await message.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        else:
            await message.reply("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 5.")


@router.message(FeedbackState.waiting_for_comment)
async def save_feedback(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞."""
    comment = message.text.strip()
    data = await state.get_data()
    tutor_id = data["tutor_id"]
    rating = data["rating"]

    execute_query("""
    INSERT INTO feedback (tutor_id, student_name, student_contact, rating, comment)
    VALUES (?, ?, ?, ?, ?)
    """, (tutor_id, message.from_user.full_name, message.from_user.id, rating, comment))

    update_tutor_rating(tutor_id)

    await state.clear()
    await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await send_main_menu(message)


@router.callback_query(F.data == "view_feedback")
async def view_feedback(call: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ —É—á–µ–Ω–∏–∫–∞."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await send_or_edit_message(
            call,
            text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=main_menu,
            edit=False
        )
        return

    feedbacks = execute_query("""
        SELECT f.id, t.name, f.rating, f.comment
        FROM feedback f
        JOIN tutors t ON f.tutor_id = t.id
        WHERE f.student_contact = ?
    """, (call.from_user.id,), fetchall=True)

    if feedbacks:
        response = "üìù –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã:\n\n"
        for feedback_id, tutor_name, rating, comment in feedbacks:
            response += f"#{feedback_id}: {tutor_name}\n‚≠ê {rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            await call.message.answer(response, reply_markup=generate_feedback_keyboard(feedback_id))
    else:
        await send_or_edit_message(
            call,
            text="‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.",
            reply_markup=generate_back_button(),
            edit=False
        )


@router.callback_query(F.data == "calendar")
async def calendar_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–∏–π'."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await send_or_edit_message(
            call,
            text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=main_menu,
            edit=False
        )
        return

    bookings = execute_query("""
    SELECT t.name, b.date, b.time, b.status
    FROM bookings b
    JOIN tutors t ON b.tutor_id = t.id
    WHERE b.student_contact = ?
    ORDER BY b.date, b.time
    """, (call.from_user.id,), fetchall=True)

    if bookings:
        response = "üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
        for tutor_name, date, time, status in bookings:
            response += f"üë©‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\nüìÜ –î–∞—Ç–∞: {date}, –≤—Ä–µ–º—è: {time}\nüìå –°—Ç–∞—Ç—É—Å: {status}\n\n"
        await send_or_edit_message(
            call,
            text=response,
            reply_markup=generate_back_button(),
            edit=False
        )
    else:
        await send_or_edit_message(
            call,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π.",
            reply_markup=generate_back_button(),
            edit=False
        )


@router.callback_query(F.data == "find_tutor")
async def find_tutor_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞'."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "student":
        await send_or_edit_message(
            call,
            text="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=main_menu,
            edit=False
        )
        return

    tutors = execute_query("SELECT id, name FROM tutors", fetchall=True)
    if tutors:
        await send_or_edit_message(
            call,
            text="üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—Ç–∑—ã–≤—ã:",
            reply_markup=generate_tutor_keyboard(tutors),
            edit=False
        )
    else:
        await send_or_edit_message(
            call,
            text="‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=generate_back_button(),
            edit=False
        )


def update_tutor_rating(tutor_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    execute_query("""
    UPDATE tutors
    SET rating = (SELECT AVG(rating) FROM feedback WHERE tutor_id = ?),
        feedback_count = (SELECT COUNT(*) FROM feedback WHERE tutor_id = ?)
    WHERE id = ?
    """, (tutor_id, tutor_id, tutor_id))


def register_handlers_student(dp):
    dp.include_router(router)
