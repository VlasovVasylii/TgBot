from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import RegistrationState
from db import execute_query
from keyboards import generate_role_selection_keyboard, generate_back_button

router = Router()


@router.message(F.text.startswith("/register"))
async def start_registration(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    await state.clear()
    await state.set_state(RegistrationState.waiting_for_role)
    await message.reply("üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=generate_role_selection_keyboard())


@router.callback_query(F.data.in_({"student", "tutor"}))
async def set_user_role(call: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    role = call.data
    await state.update_data(role=role)
    await state.set_state(RegistrationState.waiting_for_full_name)
    await call.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await call.answer()


@router.message(RegistrationState.waiting_for_full_name)
async def set_user_full_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)

    data = await state.get_data()
    if data["role"] == "tutor":
        await state.set_state(RegistrationState.waiting_for_subject)
        await message.reply("üìö –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–ø–æ–¥–∞—ë—Ç–µ:")
    else:
        await state.set_state(RegistrationState.waiting_for_contact)
        await message.reply("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):")


@router.message(RegistrationState.waiting_for_subject)
async def set_tutor_subject(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    subject = message.text.strip()
    await state.update_data(subject=subject)
    await state.set_state(RegistrationState.waiting_for_contact)
    await message.reply("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):")


@router.message(RegistrationState.waiting_for_contact)
async def save_user_data(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É."""
    contact = message.text.strip()
    data = await state.get_data()

    role = data["role"]
    full_name = data["full_name"]

    if role == "tutor":
        subject = data["subject"]
        execute_query("""
        INSERT INTO tutors (name, subject, contact)
        VALUES (?, ?, ?)
        """, (full_name, subject, contact))
    else:
        execute_query("""
        INSERT INTO users (id, full_name, role, contact)
        VALUES (?, ?, ?, ?)
        """, (message.from_user.id, full_name, role, contact))

    await state.clear()
    await message.reply(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {'—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä' if role == 'tutor' else '—Å—Ç—É–¥–µ–Ω—Ç'}.",
        reply_markup=generate_back_button())


def register_handlers_registration(dp):
    dp.include_router(router)
