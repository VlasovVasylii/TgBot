from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import RegistrationState
from db import execute_query
from keyboards import generate_role_selection_keyboard, generate_back_button, student_menu, tutor_menu

router = Router()


@router.callback_query(F.data == "register")
async def register_user(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è".
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î, –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    user_id = call.from_user.id
    user_data = execute_query("""
        SELECT role, full_name
        FROM users
        WHERE id = ?
    """, (user_id,), fetchone=True)

    if user_data:
        role, full_name = user_data
        if role == "student":
            menu = student_menu
            role_name = "–°—Ç—É–¥–µ–Ω—Ç"
        elif role == "tutor":
            menu = tutor_menu
            role_name = "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä"
        else:
            menu = generate_back_button()
            role_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await call.message.edit_text(
            f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            f"üë§ –ò–º—è: {full_name}\n"
            f"üìã –°—Ç–∞—Ç—É—Å: {role_name}",
            reply_markup=menu
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await call.message.edit_text(
            "üëã –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
        )
    await state.clear()
    await call.message.edit_text("üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=generate_role_selection_keyboard())
    await call.answer()


@router.callback_query(F.data.in_({"student", "tutor"}))
async def set_user_role(call: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    role = call.data
    await state.update_data(role=role)
    await state.set_state(RegistrationState.waiting_for_full_name)
    await call.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await call.answer()


@router.message(RegistrationState.waiting_for_full_name)
async def set_user_full_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)

    data = await state.get_data()
    if data["role"] == "tutor":
        await state.set_state(RegistrationState.waiting_for_subject)
        await message.reply("üìö –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–µ–ø–æ–¥–∞—ë—Ç–µ:")
    else:
        await state.set_state(RegistrationState.waiting_for_contact)
        await message.reply("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):")


@router.message(RegistrationState.waiting_for_subject)
async def set_tutor_subject(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    subject = message.text.strip()
    await state.update_data(subject=subject)
    await state.set_state(RegistrationState.waiting_for_contact)
    await message.reply("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):")


@router.message(RegistrationState.waiting_for_contact)
async def save_user_data(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É."""
    contact = message.text.strip()
    data = await state.get_data()

    role = data["role"]
    full_name = data["full_name"]

    if role == "tutor":
        subject = data["subject"]
        execute_query("""
        INSERT INTO tutors (id, name, subject, contact)
        VALUES (?, ?, ?, ?)
        """, (message.from_user.id, full_name, subject, contact))
    else:
        execute_query("""
        INSERT INTO students (id, full_name, contact)
        VALUES (?, ?, ?)
        """, (message.from_user.id, full_name, contact))

    await state.clear()
    await message.reply(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {'—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä' if role == 'tutor' else '—Å—Ç—É–¥–µ–Ω—Ç'}.",
        reply_markup=generate_back_button())


def register_handlers_registration(dp):
    dp.include_router(router)
