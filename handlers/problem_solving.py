from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import ProblemSolvingState
from features.problem_solving import solve_problem
from keyboards import generate_back_button
from .menu import send_main_menu

router = Router()


@router.callback_query(F.data == "solve_problem")
async def solve_problem_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    await state.clear()
    await state.set_state(ProblemSolvingState.waiting_for_problem)
    await call.message.edit_text("ü§î –û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å:", reply_markup=generate_back_button())
    await call.answer()


@router.message(ProblemSolvingState.waiting_for_problem)
async def solve_user_problem(message: Message, state: FSMContext):
    """–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
    problem = message.text
    await message.reply("‚è≥ –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        solution = solve_problem(problem)
        await state.clear()
        await message.reply(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n\n{solution}")
    except Exception as e:
        await state.clear()
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
    await send_main_menu(message)


def register_handlers_problem_solving(dp):
    dp.include_router(router)
