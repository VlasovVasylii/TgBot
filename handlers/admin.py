from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from db import execute_query
from keyboards import generate_admin_panel_keyboard, generate_back_button
from config import ADMIN_CHAT_ID

router = Router()


@router.message(F.text.startswith("/admin"))
async def admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if str(message.chat.id) != ADMIN_CHAT_ID:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await message.reply("üìã –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=generate_admin_panel_keyboard())


@router.callback_query(F.data == "manage_tutors")
async def manage_tutors(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏."""
    tutors = execute_query("SELECT id, name, subject, rating FROM tutors", fetchall=True)

    if tutors:
        response = "üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤:\n\n"
        for tutor_id, name, subject, rating in tutors:
            response += f"ID: {tutor_id}\n–ò–º—è: {name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–†–µ–π—Ç–∏–Ω–≥: {rating:.1f}\n\n"
        await call.message.edit_text(response, reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "manage_users")
async def manage_users(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    users = execute_query("SELECT id, full_name, role FROM users", fetchall=True)

    if users:
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user_id, full_name, role in users:
            response += f"ID: {user_id}\n–ò–º—è: {full_name}\n–†–æ–ª—å: {'–°—Ç—É–¥–µ–Ω—Ç' if role == 'student' else '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä'}\n\n"
        await call.message.edit_text(response, reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "manage_feedbacks")
async def manage_feedbacks(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏."""
    feedbacks = execute_query("""
    SELECT f.id, t.name, f.rating, f.comment, f.student_name
    FROM feedback f
    JOIN tutors t ON f.tutor_id = t.id
    """, fetchall=True)

    if feedbacks:
        response = "‚≠ê –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤:\n\n"
        for feedback_id, tutor_name, rating, comment, student_name in feedbacks:
            response += (
                f"ID: {feedback_id}\n"
                f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            )
        await call.message.edit_text(response, reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "manage_bookings")
async def manage_bookings(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏."""
    bookings = execute_query("""
    SELECT b.id, t.name, b.student_name, b.date, b.time, b.status
    FROM bookings b
    JOIN tutors t ON b.tutor_id = t.id
    """, fetchall=True)

    if bookings:
        response = "üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π:\n\n"
        for booking_id, tutor_name, student_name, date, time, status in bookings:
            response += (
                f"ID: {booking_id}\n"
                f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n"
                f"–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n–î–∞—Ç–∞: {date}, –≤—Ä–µ–º—è: {time}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
        await call.message.edit_text(response, reply_markup=generate_back_button())
    else:
        await call.message.edit_text("‚ùå –ó–∞–Ω—è—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=generate_back_button())
    await call.answer()


def register_handlers_admin(dp):
    dp.include_router(router)
