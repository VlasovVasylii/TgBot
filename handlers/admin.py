from aiogram import Router, F
from aiogram.types import CallbackQuery
from states import AdminState
from aiogram.fsm.context import FSMContext
from services import execute_query
from keyboards import admin_menu, generate_back_button, main_menu

router = Router()


@router.callback_query(F.data == "admin")
async def admin_panel(call: CallbackQuery):
    """
    –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin = execute_query(
        "SELECT name FROM admins WHERE id = ?", (call.from_user.id,), fetchone=True
    )

    if not admin:
        await call.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                                     reply_markup=main_menu)
        await call.answer()
        return

    await call.message.edit_text(
        f"üìã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, {admin[0]}:",
        reply_markup=admin_menu
    )
    await call.answer()


@router.callback_query(AdminState.waiting_for_manage_action, F.data.in_(
    ["manage_tutors", "manage_users", "manage_feedbacks", "manage_bookings"]))
async def manage_actions(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    action = call.data
    if action == "manage_tutors":
        await handle_manage_tutors(call)
    elif action == "manage_users":
        await handle_manage_users(call)
    elif action == "manage_feedbacks":
        await handle_manage_feedbacks(call)
    elif action == "manage_bookings":
        await handle_manage_bookings(call)
    else:
        await call.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=generate_back_button())
    await call.answer()


async def handle_manage_tutors(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏."""
    tutors = execute_query("SELECT id, name, subject, rating FROM tutors", fetchall=True)

    if tutors:
        response = "üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤:\n\n"
        for tutor_id, name, subject, rating in tutors:
            response += f"ID: {tutor_id}\n–ò–º—è: {name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–†–µ–π—Ç–∏–Ω–≥: {rating:.1f}\n\n"
        await call.message.edit_text(response, reply_markup=admin_menu)
    else:
        await call.message.edit_text("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=generate_back_button())


async def handle_manage_users(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    students = execute_query("SELECT id, full_name, contact FROM students", fetchall=True)
    tutors = execute_query("SELECT id, name, subject, contact FROM tutors", fetchall=True)

    response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    if students:
        response += "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç—ã:\n"
        for student_id, full_name, contact in students:
            response += f"ID: {student_id}\n–ò–º—è: {full_name}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n"

    if tutors:
        response += "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n"
        for tutor_id, name, subject, contact in tutors:
            response += f"ID: {tutor_id}\n–ò–º—è: {name}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n"

    if not students and not tutors:
        response = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    await call.message.edit_text(response, reply_markup=admin_menu)


async def handle_manage_feedbacks(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏."""
    feedbacks = execute_query("""
        SELECT f.id, t.name, f.rating, f.comment, f.student_name
        FROM feedback f
        JOIN tutors t ON f.tutor_id = t.id
    """, fetchall=True)

    if feedbacks:
        response = "‚≠ê –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤:\n\n"
        for feedback_id, tutor_name, rating, comment, student_name in feedbacks:
            response += (
                f"ID: {feedback_id}\n"
                f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            )
        await call.message.edit_text(response, reply_markup=admin_menu)
    else:
        await call.message.edit_text("‚ùå –û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=generate_back_button())


async def handle_manage_bookings(call: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏."""
    bookings = execute_query("""
        SELECT b.id, t.name, b.student_name, b.date, b.time, b.status
        FROM bookings b
        JOIN tutors t ON b.tutor_id = t.id
    """, fetchall=True)

    if bookings:
        response = "üìÖ –°–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π:\n\n"
        for booking_id, tutor_name, student_name, date, time, status in bookings:
            response += (
                f"ID: {booking_id}\n"
                f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n"
                f"–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n–î–∞—Ç–∞: {date}, –≤—Ä–µ–º—è: {time}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
        await call.message.edit_text(response, reply_markup=admin_menu)
    else:
        await call.message.edit_text("‚ùå –ó–∞–Ω—è—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=generate_back_button())


def register_handlers_admin(dp):
    dp.include_router(router)
