from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from states import TestGenerationState
from datetime import datetime
from services import execute_query
from aiogram.fsm.context import FSMContext
from features import generate_test
from .main import send_main_menu
from utils import get_user_role
from keyboards import main_menu, tutor_menu, generate_back_button

router = Router()


@router.callback_query(F.data == "tutor_functions")
async def tutor_panel(call: CallbackQuery):
    """–ü–∞–Ω–µ–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "tutor":
        await call.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=main_menu
        )
        await call.answer()
        return

    await call.message.edit_text(
        "üìö –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=tutor_menu
    )
    await call.answer()


@router.callback_query(F.data.startswith("reviews_"))
async def filter_reviews(call: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    user_role = get_user_role(call.from_user.id)
    if user_role != "tutor":
        await call.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=generate_back_button()
        )
        await call.answer()
        return

    tutor = execute_query(
        "SELECT id FROM tutors WHERE id = ?", (call.from_user.id,), fetchone=True
    )

    if not tutor:
        await call.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.",
            reply_markup=generate_back_button()
        )
        return

    tutor_id = tutor[0]
    filter_type = call.data.split("_")[1]

    if filter_type == "high":
        query = "SELECT student_name, rating, comment FROM feedback WHERE tutor_id = ? AND rating >= 4"
    elif filter_type == "low":
        query = "SELECT student_name, rating, comment FROM feedback WHERE tutor_id = ? AND rating <= 3"
    else:
        query = "SELECT student_name, rating, comment FROM feedback WHERE tutor_id = ?"

    feedbacks = execute_query(query, (tutor_id,), fetchall=True)

    if feedbacks:
        response = "üìä –û—Ç–∑—ã–≤—ã:\n\n"
        for student_name, rating, comment in feedbacks:
            response += f"üë§ {student_name}\n‚≠ê {rating}\nüí¨ {comment}\n\n"
    else:
        response = "‚ùå –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É."

    await call.message.edit_text(response, reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "upcoming_classes")
async def view_upcoming_classes(call: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = get_user_role(call.from_user.id)
    if user_role != "tutor":
        await call.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=main_menu
        )
        await call.answer()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor = execute_query(
        "SELECT id, name FROM tutors WHERE id = ?", (call.from_user.id,), fetchone=True
    )

    if not tutor:
        await call.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.",
            reply_markup=main_menu
        )
        return

    tutor_id = tutor[0]
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    upcoming_classes = execute_query("""
            SELECT student_name, date, time, comment
            FROM bookings
            WHERE tutor_id = ? AND status IN ('pending', 'approved') AND datetime(date || ' ' || time) > datetime(?)
            ORDER BY date, time
        """, (tutor_id, now), fetchall=True)

    if upcoming_classes:
        response = "üìÖ –í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
        for student_name, date, time, comment in upcoming_classes:
            response += f"üë©‚Äçüéì {student_name}: {date} –≤ {time}\nüí¨ {comment}\n\n"
    else:
        response = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π."

    await call.message.edit_text(response, reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "tutor_analytics")
async def tutor_analytics(call: CallbackQuery):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = get_user_role(user_id)
    if user_role != "tutor":
        await call.message.edit_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=generate_back_button()
        )
        await call.answer()
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    tutor = execute_query(
        "SELECT id, name FROM tutors WHERE id = ?",
        (user_id,),
        fetchone=True
    )

    if not tutor:
        await call.message.edit_text(
            "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.",
            reply_markup=generate_back_button()
        )
        return

    tutor_id, tutor_name = tutor

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = execute_query("""
        SELECT 
            COUNT(b.id) AS total_classes, 
            COALESCE(AVG(f.rating), 0) AS avg_rating
        FROM bookings b
        LEFT JOIN feedback f ON b.id = f.tutor_id
        WHERE b.tutor_id = ? AND b.status = 'approved'
    """, (tutor_id,), fetchone=True)

    total_classes = stats[0] or 0
    avg_rating = f"{stats[1]:.2f}" if stats[1] else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    response = (
        f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {tutor_name}:\n\n"
        f"üë• –ü—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {total_classes}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}"
    )

    await call.message.edit_text(response, reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(F.data == "generate_test")
async def generate_test_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞."""
    user_role = get_user_role(call.from_user.id)
    if user_role == "tutor":
        await state.clear()
        await state.set_state(TestGenerationState.waiting_for_topic)
        await call.message.edit_text("üìö –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:", reply_markup=generate_back_button())
        await call.answer()
    else:
        await call.message.edit_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
        await call.answer()
        return


@router.message(TestGenerationState.waiting_for_topic)
async def generate_test_for_topic(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ."""
    topic = message.text
    await message.reply("‚è≥ –°–æ–∑–¥–∞—ë—Ç—Å—è —Ç–µ—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        test = generate_test(topic)
        await state.clear()
        await message.reply(f"‚úÖ –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ '{topic}':\n\n{test}")
    except Exception as e:
        await state.clear()
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
    await send_main_menu(message, state)


def register_handlers_tutor(dp):
    dp.include_router(router)
