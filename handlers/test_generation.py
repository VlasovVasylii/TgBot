from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import TestGenerationState
from features.test_generation import generate_test
from keyboards import generate_back_button
from .menu import send_main_menu

router = Router()


@router.callback_query(F.data == "generate_test")
async def generate_test_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞."""
    await state.clear()
    await state.set_state(TestGenerationState.waiting_for_topic)
    await call.message.edit_text("üìö –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —Ç–µ—Å—Ç–∞:", reply_markup=generate_back_button())
    await call.answer()


@router.message(TestGenerationState.waiting_for_topic)
async def generate_test_for_topic(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ."""
    topic = message.text
    await message.reply("‚è≥ –°–æ–∑–¥–∞—ë—Ç—Å—è —Ç–µ—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    try:
        test = generate_test(topic)
        await state.clear()
        await message.reply(f"‚úÖ –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ '{topic}':\n\n{test}")
    except Exception as e:
        await state.clear()
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
    await send_main_menu(message)


def register_handlers_test_generation(dp):
    dp.include_router(router)
