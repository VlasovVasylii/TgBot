from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states import BookingState
from datetime import datetime, timedelta
from db import execute_query
from keyboards import generate_back_button, generate_tutor_keyboard, generate_confirm_booking_keyboard
from aiogram import Router, F
from aiogram_calendar.simple_calendar import SimpleCalendar, SimpleCalendarCallback

router = Router()


@router.callback_query(F.data == "book")
async def start_booking(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await state.clear()
    tutors = execute_query("SELECT id, name FROM tutors", fetchall=True)
    if tutors:
        response = "üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
        for tutor_id, name in tutors:
            response += f"{tutor_id}: {name}\n"
        await call.message.edit_text(response, reply_markup=generate_tutor_keyboard(tutors))
        await state.set_state(BookingState.waiting_for_tutor_id)
    else:
        await call.message.edit_text("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(BookingState.waiting_for_tutor_id)
async def handle_tutor_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞."""
    tutor_id = call.data.split("_")[1]
    tutor = execute_query("SELECT id, name FROM tutors WHERE id = ?", (tutor_id,), fetchone=True)
    if tutor:
        await state.update_data(tutor_id=tutor[0])
        await call.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=await SimpleCalendar().start_calendar())
        await state.set_state(BookingState.waiting_for_date)
    else:
        await call.message.edit_text("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=generate_back_button())
    await call.answer()


@router.callback_query(SimpleCalendarCallback.filter())
async def process_calendar(call: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    result, key, step = await SimpleCalendar().process_selection(call, callback_data)
    if result:
        selected_date_str = result.strftime("%Y-%m-%d")
        if datetime.strptime(selected_date_str, "%Y-%m-%d").date() >= datetime.now().date():
            await state.update_data(date=selected_date_str)
            await call.message.edit_text(
                f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {selected_date_str}.\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):"
            )
            await state.set_state(BookingState.waiting_for_time)
        else:
            await call.message.edit_text(
                "‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=await SimpleCalendar().start_calendar()
            )
    else:
        await call.message.edit_text("‚ùå –í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=generate_back_button())
    await call.answer()


@router.message(BookingState.waiting_for_time)
async def handle_booking_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    time = message.text.strip()
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(time, "%H:%M")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        data = await state.get_data()
        date = data["date"]
        selected_datetime = datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        if selected_datetime <= datetime.now() + timedelta(hours=1.5):
            await message.reply("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –ø–æ–∑–∂–µ, —á–µ–º –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è.")
            return

        await state.update_data(time=time)
        await state.set_state(BookingState.waiting_for_comment)
        await message.reply("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'):")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")


@router.message(BookingState.waiting_for_comment)
async def handle_booking_comment(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    comment = message.text.strip()
    comment = comment if comment.lower() != "–Ω–µ—Ç" else ""
    await state.update_data(comment=comment)

    data = await state.get_data()
    tutor_id = data["tutor_id"]
    date = data["date"]
    time = data["time"]

    tutor = execute_query("SELECT name FROM tutors WHERE id = ?", (tutor_id,), fetchone=True)
    if tutor:
        tutor_name = tutor[0]
        await state.set_state(BookingState.confirm_booking)
        await message.reply(
            f"üìÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
            reply_markup=generate_confirm_booking_keyboard()
        )
    else:
        await message.reply("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


def register_handlers_booking(dp):
    dp.include_router(router)
