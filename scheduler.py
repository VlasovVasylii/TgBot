from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from db import execute_query
from shared import bot

scheduler = AsyncIOScheduler()


def get_upcoming_bookings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å."""
    now = datetime.now()
    upcoming_time = now + timedelta(hours=1)
    try:
        return execute_query("""
        SELECT b.id, b.student_name, b.student_contact, b.date, b.time, t.name, t.contact
        FROM bookings b
        JOIN tutors t ON b.tutor_id = t.id
        WHERE datetime(b.date || ' ' || b.time) BETWEEN datetime(?) AND datetime(?)
        """, (now.strftime("%Y-%m-%d %H:%M:%S"), upcoming_time.strftime("%Y-%m-%d %H:%M:%S")), fetchall=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π: {e}")
        return []


async def send_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    bookings = get_upcoming_bookings()
    if not bookings:
        return

    for booking in bookings:
        student_contact, tutor_contact = booking[2], booking[6]
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É
            await bot.send_message(
                student_contact,
                f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–Ω—è—Ç–∏–µ —Å {booking[5]} —á–µ—Ä–µ–∑ 1 —á–∞—Å.\n–î–∞—Ç–∞: {booking[3]}, –≤—Ä–µ–º—è: {booking[4]}"
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                tutor_contact,
                f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–Ω—è—Ç–∏–µ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–º {booking[1]} —á–µ—Ä–µ–∑ 1 —á–∞—Å.\n"
                f"–î–∞—Ç–∞: {booking[3]}, –≤—Ä–µ–º—è: {booking[4]}"
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


def update_booking_status():
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–Ω—è—Ç–∏–π —Å 'pending' –Ω–∞ 'approved', –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å."""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        execute_query("""
        UPDATE bookings
        SET status = 'approved'
        WHERE status = 'pending' AND datetime(date || ' ' || time) <= datetime(?)
        """, (current_time,))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–Ω—è—Ç–∏–π: {e}")


def setup_reminders():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö."""
    scheduler.add_job(send_reminders, "interval", minutes=1)
    scheduler.add_job(update_booking_status, "interval", minutes=1)
    scheduler.start()
